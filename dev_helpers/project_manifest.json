{
  "name": "telegram-ai-assistant",
  "version": "0.1.0",
  "description": "A Telegram bot that uses OpenAI for conversations with context management in Firebase",
  "modules": [
    {
      "name": "bot.main",
      "path": "bot/main.py",
      "description": "FastAPI application and entry point"
    },
    {
      "name": "bot.telegram_router",
      "path": "bot/telegram_router.py",
      "description": "Telegram message handling and routing"
    },
    {
      "name": "bot.openai_client",
      "path": "bot/openai_client.py",
      "description": "OpenAI API integration for generating responses"
    },
    {
      "name": "bot.firestore_client",
      "path": "bot/firestore_client.py",
      "description": "Firebase Firestore operations for data persistence"
    },
    {
      "name": "bot.summarizer",
      "path": "bot/summarizer.py",
      "description": "Conversation summarization using Gemini API"
    },
    {
      "name": "bot.history_manager",
      "path": "bot/history_manager.py",
      "description": "Manages conversation history, triggers summarization, and stores summaries"
    },
    {
      "name": "bot.proactive",
      "path": "bot/proactive.py",
      "description": "Proactive message delivery module for HTTP endpoint approach with timezone-based user targeting"
    },

    {
      "name": "scripts.set_webhook",
      "path": "scripts/set_webhook.py",
      "description": "Script to register Telegram webhook"
    },
    {
      "name": "scripts.set_env_vars",
      "path": "scripts/set_env_vars.sh",
      "description": "Sets environment variables in Cloud Run service via gcloud CLI"
    },
    {
      "name": "scripts.build_and_deploy",
      "path": "scripts/build_and_deploy.sh", 
      "description": "Builds Docker image and deploys to Cloud Run without modifying environment variables"
    },


    {
      "name": "config",
      "path": "config.py",
      "description": "Environment and configuration management"
    }
  ],
  "collections": [
    {
      "name": "history",
      "description": "Stores conversation messages by user ID with timestamps"
    },
    {
      "name": "summaries",
      "description": "Stores summarized conversation chunks (max 5 per user)"
    },
    {
      "name": "system_prompts",
      "description": "Stores customized system prompts by user ID"
    },
    {
      "name": "user_settings",
      "description": "Stores user preferences including timezone settings"
    },
    {
      "name": "proactive_meta",
      "description": "Tracks last sent dates for proactive messages to prevent duplicates"
    }
  ],
  "dependencies": [
    "python-telegram-bot",
    "google-cloud-firestore",
    "openai",
    "google-generativeai",
    "python-dotenv",
    "fastapi",
    "uvicorn",
    "pydantic",
    "pytz",
    "requests"
  ],
  "deployment": {
    "cloud_run_project": "therapist-o3",
    "firebase_project": "ales-f75a1",
    "region": "us-central1",
    "service_name": "therapist-o3",
    "artifact_registry": "cloud-run-source-deploy",
    "service_account": "therapist-o3-service@therapist-o3.iam.gserviceaccount.com",
    "authentication_method": "service_identity",
    "environment_variables": {
      "TELEGRAM_BOT_TOKEN": "Set via gcloud CLI",
      "OPENAI_API_KEY": "Set via gcloud CLI", 
      "GEMINI_API_KEY": "Set via gcloud CLI",
      "FIREBASE_PROJECT_ID": "ales-f75a1 (hardcoded)"
    },
         "scripts": {
       "set_env_vars.sh": "Sets environment variables via gcloud CLI",
       "build_and_deploy.sh": "Builds and deploys Docker image without touching env vars"
     }
  },
  "security": {
    "firebase_authentication": "service_identity",
    "service_account_permissions": [
      "roles/firebase.admin on ales-f75a1 project"
    ],
    "notes": [
      "Uses Cloud Run service identity instead of GOOGLE_APPLICATION_CREDENTIALS",
      "Dedicated user-managed service account for better security",
      "No explicit credentials stored in environment variables"
    ]
  },
  "architecture_decisions": [
    {
      "id": "ADR-0001",
      "title": "Use Firebase Firestore for Data Storage",
      "path": "docs/ADR-0001-firestore-storage.md"
    },
    {
      "id": "ADR-0002", 
      "title": "Dual Service Deployment Strategy",
      "path": "docs/ADR-0002-dual-service-deployment.md"
    },
    {
      "id": "ADR-0003",
      "title": "Keep Proactive Scheduler in a Dedicated Cloud Run Service", 
      "path": "docs/ADR-0003-scheduler-as-separate-service.md"
    },
    {
      "id": "ADR-0004",
      "title": "Use Service Identity for Firebase Authentication",
      "description": "Replaced GOOGLE_APPLICATION_CREDENTIALS with Cloud Run service identity for better security and compliance with Google Cloud best practices"
    },
    {
      "id": "ADR-0005",
      "title": "Defer Cloud Build Trigger; Keep Manual Deploy Scripts",
      "path": "docs/ADR-0005-ci-cd-deferred.md"
    }
  ]
} 