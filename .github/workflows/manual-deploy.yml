name: Manual Deploy to Cloud Run

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      reason:
        description: 'Reason for deployment'
        required: false
        default: 'Manual deployment'

permissions:
  contents: read
  id-token: write

jobs:
  manual-deploy:
    name: Manual Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for prohibited artifacts
        run: |
          if grep -R --line-number -E '"private_key"' ./*.json bot scripts 2>/dev/null || test -e firebase.json || test -d functions; then
            echo "‚ùå Credential artefacts detected"; exit 1
          fi

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${{ secrets.CLOUD_RUN_REGION }}-docker.pkg.dev

      - name: Build Docker image
        env:
          IMAGE_NAME: ${{ secrets.CLOUD_RUN_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.DOCKER_REGISTRY_REPO }}/${{ secrets.CLOUD_RUN_SERVICE_NAME }}
        run: |
          docker build -t $IMAGE_NAME:${{ github.sha }} -t $IMAGE_NAME:latest .

      - name: Push Docker image to Artifact Registry
        env:
          IMAGE_NAME: ${{ secrets.CLOUD_RUN_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.DOCKER_REGISTRY_REPO }}/${{ secrets.CLOUD_RUN_SERVICE_NAME }}
        run: |
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ secrets.CLOUD_RUN_SERVICE_NAME }}
          region: ${{ secrets.CLOUD_RUN_REGION }}
          image: ${{ secrets.CLOUD_RUN_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.DOCKER_REGISTRY_REPO }}/${{ secrets.CLOUD_RUN_SERVICE_NAME }}:${{ github.sha }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          env_vars: |
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            FIREBASE_CRED_JSON='${{ secrets.FIREBASE_CRED_JSON }}'
            FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          flags: --min-instances=0 --max-instances=10 --concurrency=80 --memory=1Gi --cpu=1 --allow-unauthenticated

      - name: Output Deployed URL
        run: |
          echo "üöÄ Deployed to: ${{ steps.deploy.outputs.url }}"
          echo "üìù Reason: ${{ github.event.inputs.reason }}"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies for webhook script
        run: pip install -r requirements.txt

      - name: Run set_webhook.py script
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          SERVICE_URL: ${{ steps.deploy.outputs.url }}
        run: |
          python scripts/set_webhook.py

      - name: Deployment Summary
        run: |
          echo "‚úÖ Manual deployment completed successfully!"
          echo "üåê Service URL: ${{ steps.deploy.outputs.url }}"
          echo "üìù Deployment reason: ${{ github.event.inputs.reason }}"
          echo "üè∑Ô∏è Environment: ${{ github.event.inputs.environment }}" 